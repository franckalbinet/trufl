# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_optimizer.ipynb.

# %% auto 0
__all__ = ['Optimizer']

# %% ../nbs/02_optimizer.ipynb 3
class Optimizer:
    def __init__(self, 
               gdf_samples_t0, # Dataframe with all sample values at t0
               id_name:str='loc_id'
               ):
        "Optimize the number of points for t. Provided the number of points to sample in t based on t-1, return values number of sample points."
        self.samples_to = gdf_samples_t0
        self.id_name = id_name

    def get_number_samples(self, id:int):
        "Return the number of samples for polygon (id_name)"
        total_samples = self.samples_to.loc[self.samples_to[self.id_name] == id].shape[0]
        return total_samples
    
    def get_internal_metrics(self, df):
        "Get the metric values for polygon"
        metrics_df = df.groupby('loc_id')['value'].agg(['mean', 'median', 'min', 'max', 'std']).reset_index()
        metrics_df.columns = ['loc_id', 'mean_value', 'median_value', 'min_value', 'max_value', 'std_value']
        return metrics_df
    
    def get_external_metrics(self, df, window_size:int=1):
        "Get the metric values for the neighborhood around the polygon"
        pass
        return df
    
    def optimize_sample_number(self, initial_n_points, id:int, internal_metrics=None, neighborhood_metrics=None):
        "Optimize the number of points for polygon (id_name) based on samples in t and the metrics of the polygon and its neighborhood. Return the number of points to sample in t+1."
    
        proposed_n_points = initial_n_points
        
        return proposed_n_points
    


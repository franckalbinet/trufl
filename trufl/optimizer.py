# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_optimizer.ipynb.

# %% auto 0
__all__ = ['Optimizer']

# %% ../nbs/02_optimizer.ipynb 3
class Optimizer:
    def __init__(self, state):
        "Optimize the number of points for t. Provided the number of points to sample in t based on t-1, return values number of sample points."
        self.state = state
        return
    
    def CP_distance(self):
        "Calculate the CP distance for all te polygons in t"
        return
        
        
    def build_matrix(self, polygon_list):
        "Build the matrix for the optimization"
        import numpy as np
        matrix = []
        self.list_id = polygon_list
        for polygon in polygon_list:
            polygon_state = self.state.get(loc_id=polygon, as_numpy=False)
            values = [var.value for var in polygon_state]
            matrix.append(values)
            
        decision_matrix = np.vstack(matrix)
        # build matrix with columns based on the needed criteria
        
        self.matrix = decision_matrix
        
        return decision_matrix
    
    def build_weight_vector(self, weight_vector, benefit_vector):
        "Build the weight vector for the optimization"
        self.weight_vector = weight_vector
        self.benefit_vector = benefit_vector
        return
        
    def rank(self, method = "SAW"):
        "Rank the polygons based on the criteria"
        import mcdm
        # self.weight_vector = [0.5, 0.5]
        
        ranking = mcdm.rank(self.matrix,
                            alt_names= self.list_id,
                            is_benefit_x = self.benefit_vector,
                            w_vector=self.weight_vector,
                            n_method="Linear2",
                            s_method=method)
        
        return ranking
